{"version":3,"sources":["webpack://gatsby-starter-advanced/./src/templates/postShortUrl.jsx"],"names":["PostShortUrlTemplate","data","slug","pageContext","postNode","markdownRemark","post","frontmatter","postExcerpt","convertHtmlToExcerpt","html","unsplashImgCoverId","fields","isDraft","fieldSlug","shortPathname","id","targetUrl","findRenderedPathname","allMarkdownRemark","useEffect","window","location","replace","title","config","postPath","shortUrl","postSEO","coverPath","generateCoverImageUrl","postUnsplashImgCoverId"],"mappings":"4PAYe,SAASA,EAAT,GAAsD,IAAtBC,EAAqB,EAArBA,KACrCC,EAD0D,EAAfC,YAC3CD,KACFE,EAAWH,EAAKI,eAChBC,EAAOF,EAASG,YAEhBC,GAAcC,QAAqBL,EAASM,MAC1CC,EAAuBV,EAAKI,eAAeE,YAA3CI,mBACR,EAAqDV,EAAKI,eAAeO,OAAjEC,EAAR,EAAQA,QAAgBC,EAAxB,EAAiBZ,KAAkBa,EAAnC,EAAmCA,cAC9BT,EAAKU,KACRV,EAAKU,GAAKd,GAEZ,IAAMe,GAAYC,QAAqBhB,EAAMD,EAAKkB,mBAOlD,OANAC,gBAAU,WACS,KAAdH,GAAoBI,QACrBA,OAAOC,SAASC,QAAQN,KAEzB,IAGD,gCACE,2BACE,gBAAC,IAAD,KACE,6BAAWX,EAAKkB,MAAhB,MAA2BC,iBAE3BZ,GAAW,gBAAC,IAAD,CACXa,SAAUX,EACVY,SAAUZ,EACVX,SAAUA,EACVI,YAAaA,EACboB,SAAO,EACPC,WAAWC,QAAsBhB,GACjCiB,uBAAwBpB","file":"component---src-templates-post-short-url-jsx-6a4a1ac3b51c92c26221.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link, navigate } from \"gatsby\";\nimport \"./prism-template.css\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport { generateCoverImageUrl, findRenderedPathname, convertHtmlToExcerpt } from \"../utils/path-utils\";\n\n/**\n * This component will render only SEO info, then redirect to actual post.\n */\n\nexport default function PostShortUrlTemplate({ data, pageContext }) {\n  const { slug } = pageContext;\n  const postNode = data.markdownRemark;\n  const post = postNode.frontmatter;\n  // Broken excerpt from GraphQL, use this way to get excerpt\n  const postExcerpt = convertHtmlToExcerpt(postNode.html);\n  const { unsplashImgCoverId } = data.markdownRemark.frontmatter;\n  const { isDraft, slug : fieldSlug, shortPathname } = data.markdownRemark.fields;\n  if (!post.id) {\n    post.id = slug;\n  }\n  const targetUrl = findRenderedPathname(slug, data.allMarkdownRemark);\n  useEffect(() => {\n    if(targetUrl !== '' && window) {\n      window.location.replace(targetUrl);\n    }\n  }, []);\n\n  return (\n    <>\n      <div>\n        <Helmet>\n          <title>{`${post.title} | ${config.siteTitle}`}</title>\n        </Helmet>\n        {!isDraft && <SEO\n          postPath={shortPathname}\n          shortUrl={shortPathname}\n          postNode={postNode}\n          postExcerpt={postExcerpt}\n          postSEO\n          coverPath={generateCoverImageUrl(fieldSlug)}\n          postUnsplashImgCoverId={unsplashImgCoverId}\n          />}\n      </div>\n    </>\n  );\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostShortUrlBySlug($slug: String!) {\n    markdownRemark: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        date\n        category\n        tags\n        unsplashImgCoverId\n      }\n      fields {\n        slug\n        date\n        readableSlug\n        isDraft\n        shortPathname\n      }\n    }\n    allMarkdownRemark: allMarkdownRemark {\n      edges {\n        node {\n          fields {\n            slug\n            renderedPathname\n          }\n        }\n      }\n    }\n  }\n\n`;\n"],"sourceRoot":""}