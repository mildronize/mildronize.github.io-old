{"version":3,"sources":["webpack://gatsby-starter-advanced/./src/components/PostListing/PostListing.jsx","webpack://gatsby-starter-advanced/./src/templates/category.jsx"],"names":["Title","styled","PostDate","PostItem","FlexContainer","breakpoint","FlexItem","width","postEdges","postList","forEach","postEdge","tags","node","frontmatter","tag","push","path","fields","renderedPathname","cover","title","date","excerpt","timeToRead","map","post","key","Link","to","format","parseISO","CategoryTemplate","pageContext","data","category","allMarkdownRemark","edges","className","config"],"mappings":"iNA0DA,IAAMA,EAAQC,mBAAH,0DAAGA,CAAH,6CAKLC,EAAWD,qBAAH,6DAAGA,CAAH,gEAMRE,EAAWF,oBAAH,6DAAGA,CAAH,sRAoCRG,GAXeH,oBAAH,iEAAGA,CAAH,yCAKNA,qBAAH,wDAAGA,CAAH,oEAMaA,oBAAH,kEAAGA,CAAH,qCAIfI,QAAW,SAAXA,CAJe,oDASbC,EAAWL,oBAAH,6DAAGA,CAAH,wBAGVI,QAAW,SAAXA,CAHU,+CAIG,gBAAGE,EAAH,EAAGA,MAAH,OAAgBA,GAAgB,MAIjD,IApHA,YAAqC,IAAdC,EAAa,EAAbA,UACfC,EAAW,GAoBjB,OAnBAD,EAAUE,SAAQ,SAACC,GACjB,IAAMC,EAAO,GACTD,EAASE,KAAKC,YAAYF,MAC5BD,EAASE,KAAKC,YAAYF,KAAKF,SAAQ,SAACK,GACtCH,EAAKI,KAAKD,MAIdN,EAASO,KAAK,CACZC,KAAON,EAASE,KAAKK,OAAOC,iBAC5BP,OACAQ,MAAOT,EAASE,KAAKC,YAAYM,MACjCC,MAAOV,EAASE,KAAKC,YAAYO,MACjCC,KAAMX,EAASE,KAAKK,OAAOI,KAAKX,EAASE,KAAKK,OAAOI,KAAM,aAC3DC,QAASZ,EAASE,KAAKU,QACvBC,WAAYb,EAASE,KAAKW,gBAK5B,2BAGIf,EAASgB,KAAI,SAACC,GAAD,OACX,gBAACvB,EAAD,CAAWwB,IAAKD,EAAKT,MACnB,gBAAC,EAAAW,KAAD,CAAMC,GAAIH,EAAKT,MAEb,gBAACb,EAAD,KACE,gBAACE,EAAD,CAAUC,MAAM,SACd,gBAACL,EAAD,MACG4B,QAAOC,OAASL,EAAKJ,MAAO,iBAGjC,gBAAChB,EAAD,KACE,gBAACN,EAAD,KAAQ0B,EAAKL,iB,8ICnChB,SAASW,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAC9CC,EAAaF,EAAbE,SACF3B,EAAY0B,EAAKE,kBAAkBC,MACzC,OACE,gBAAC,IAAD,KACE,uBAAKC,UAAU,sBACb,gBAAC,IAAD,CACEjB,MAAK,sBAAwBc,EAAxB,OAAuCI,gBAE9C,gBAAC,IAAD,CAAa/B,UAAWA","file":"component---src-templates-category-jsx-d55413b60e310e4c8a94.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport styled from 'styled-components';\nimport breakpoint from 'styled-components-breakpoint';\nimport { parseISO, format } from \"date-fns\";\n\nfunction PostListing({ postEdges }) {\n  const postList = [];\n  postEdges.forEach((postEdge) => {\n    const tags = [];\n    if (postEdge.node.frontmatter.tags) {\n      postEdge.node.frontmatter.tags.forEach((tag) => {\n        tags.push(tag);\n      });\n    }\n\n    postList.push({\n      path:  postEdge.node.fields.renderedPathname,\n      tags,\n      cover: postEdge.node.frontmatter.cover,\n      title: postEdge.node.frontmatter.title,\n      date: postEdge.node.fields.date?postEdge.node.fields.date: \"2021-01-01\",\n      excerpt: postEdge.node.excerpt,\n      timeToRead: postEdge.node.timeToRead,\n    });\n  });\n\n  return (\n    <div>\n      {\n        /* Your post list here. */\n        postList.map((post) => (\n          <PostItem  key={post.path}>\n            <Link to={post.path} >\n              {/* <a className=\"post-item-link\"> */}\n              <FlexContainer>\n                <FlexItem width=\"150px\">\n                  <PostDate >\n                    {format(parseISO(post.date), \"yyyy MMM, d\")}\n                  </PostDate>\n                </FlexItem>\n                <FlexItem >\n                  <Title>{post.title}</Title>\n                  {/* <TagContainer>\n                    {post.tags.map((tag) => (\n                      <Tag>#{tag} </Tag>\n                    ))}\n                  </TagContainer> */}\n                </FlexItem>\n              </FlexContainer>\n            </Link>\n          </PostItem>\n        ))\n      }\n    </div>\n  );\n}\n\nconst Title = styled.h4`\n  font-family: var(--font-family-heading);\n`;\n\n\nconst PostDate = styled.time`\n  color: var(--colors-text-3);\n  font-weight: 400;\n  font-size: 1rem;\n`;\n\nconst PostItem = styled.div`\n  margin-bottom:10px;\n\n  a, a:visited{\n    display: inline-block;\n    color: var(--text-heading);\n    font-weight: 400;\n    font-size: 1.2rem;\n    line-height: 1.5;\n    text-decoration: none;\n    width:100%;\n    padding: 20px 15px 20px 15px;\n    border-radius: 10px;\n  }\n\n  a:hover{\n    background: var(--colors-hover-0);\n  }\n\nh4{\n  margin:0;\n  padding:0;\n}\n`;\n\nconst TagContainer = styled.div`\n  margin-top: -5px;\n  margin-bottom:20px;\n`;\n\nconst Tag = styled.span`\n  color: var(--colors-text-3);\n  font-size: 0.8rem;\n  margin-right: 20px;\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  ${breakpoint('tablet')`\n    flex-wrap: nowrap;\n  `}\n`;\n\nconst FlexItem = styled.div`\n  min-width: 100%;\n\n  ${breakpoint('tablet')`\n    min-width: ${({ width }) => (width ? width : 0)};\n  `}\n`;\n\nexport default PostListing;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout/PageLayout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default function CategoryTemplate({ pageContext, data }) {\n  const { category } = pageContext;\n  const postEdges = data.allMarkdownRemark.edges;\n  return (\n    <Layout>\n      <div className=\"category-container\">\n        <Helmet\n          title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n        />\n        <PostListing postEdges={postEdges} />\n      </div>\n    </Layout>\n  );\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { category: { eq: $category } },\n        fields: { isDraft: { eq: false } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n            readableSlug\n            renderedPathname\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}